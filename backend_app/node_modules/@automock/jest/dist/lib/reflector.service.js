"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReflectorService = void 0;
class ReflectorService {
    constructor(reflector) {
        this.reflector = reflector;
    }
    reflectDependencies(targetClass) {
        const classDependencies = new Map();
        const types = this.reflectParamTypes(targetClass);
        const tokens = this.reflectParamTokens(targetClass);
        types.forEach((type, index) => {
            const token = ReflectorService.findToken(tokens, index);
            const isObjectType = type && type.name === 'Object';
            if (token) {
                const ref = ReflectorService.resolveRefFromToken(token);
                if (isObjectType) {
                    if (typeof ref !== 'string') {
                        classDependencies.set(ref, ref);
                        return;
                    }
                }
                if (type) {
                    classDependencies.set(ref, type);
                    return;
                }
            }
            if (type && !isObjectType) {
                classDependencies.set(type, type);
                return;
            }
            throw new Error(`'${targetClass.name}' is missing a token for the dependency at index [${index}], did you forget to inject it using @Inject()?`);
        });
        return classDependencies;
    }
    reflectParamTokens(targetClass) {
        return this.reflector.getMetadata(ReflectorService.INJECTED_TOKENS_METADATA, targetClass) || [];
    }
    reflectParamTypes(targetClass) {
        return this.reflector.getMetadata(ReflectorService.PARAM_TYPES_METADATA, targetClass) || [];
    }
    static findToken(list, index) {
        const record = list.find((element) => element.index === index);
        return record === null || record === void 0 ? void 0 : record.param;
    }
    static resolveRefFromToken(token) {
        return typeof token === 'object' && 'forwardRef' in token ? token.forwardRef() : token;
    }
}
exports.ReflectorService = ReflectorService;
ReflectorService.INJECTED_TOKENS_METADATA = 'self:paramtypes';
ReflectorService.PARAM_TYPES_METADATA = 'design:paramtypes';
